[
  {
    "objectID": "Homework4.html",
    "href": "Homework4.html",
    "title": "Homework4",
    "section": "",
    "text": "source(\"api_key.R\")\nlibrary(httr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten\n\n\n\n\n\n\n\nThe purpose of the lapply() function is to apply a function to every element in a list and return a list of the results. The lapply() equivalent purrr function is the map() function.\n\n\n\nmy_list_outcome &lt;- lapply(my_list, function(numeric_matrix) { cor(numeric_matrix, method = “kendall”) })\n\n\n\nPurrr functions are generally 1. more consistent and 2. its helper functions stand out in comparison to the BaseR apply family.\n\n\n\nA side-effect function is a function that do not naturally return the modified argument.\n\n\n\nThis is because ‘sd’ is a variable and R has separate namespaces for functions and variables. Therefore, R searches for these names in their respective namespaces based on context clues.\n\n\n\n\n\n\n\ngetRMSE &lt;- function(response, prediction, ...) {\n  \n  if (length(response) != length(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  # Calculate the squared error values\n  sq_err &lt;- (response - prediction)^2\n  \n  # Calculate the mean squared error\n  mean_sq_err &lt;- mean(sq_err, ...)\n  \n  # Calculate the root mean square error (RMSE)\n  rmse &lt;- sqrt(mean_sq_err)\n  \n  return(rmse)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Test the RMSE function (without missing values)\nrmse_val &lt;- getRMSE(resp, pred)\nrmse_val\n\n[1] 0.9581677\n\n\n\n# Repeat after replacing two of the response values with missing values (NA_real_)\nwith_na &lt;- resp\nwith_na[sample(1:n, 2)] &lt;- NA_real_\n\n# RMSE WITH specifying how to deal with missing values\nestablished_behavior &lt;- getRMSE(with_na, pred, na.rm = TRUE)\nestablished_behavior\n\n[1] 0.9659906\n\n# RMSE WITHOUT specifying how to deal with missing values\ndefault_behavior &lt;- getRMSE(with_na, pred)\ndefault_behavior\n\n[1] NA\n\n\n\n\n\n\ngetMAE &lt;- function(response, prediction, ...) {\n  \n  if (length(response) != length(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  # Calculate the absolute error values\n  abs_err &lt;- abs(response - prediction)\n  \n  # Calculate the mean absolute error\n  mean_abs_err &lt;- mean(abs_err, ...)\n  \n  return(mean_abs_err)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Test the MAE function (without missing values)\nmae_val &lt;- getMAE(resp, pred)\nmae_val\n\n[1] 0.8155776\n\n\n\n# Repeat after replacing two of the response values with missing values (NA_real_)\nwith_na &lt;- resp\nwith_na[sample(1:n, 2)] &lt;- NA_real_\n\n# MAE WITH specifying how to deal with missing values\nestablished_mae &lt;- getMAE(with_na, pred, na.rm = FALSE)\nestablished_mae\n\n[1] NA\n\n# MAE WITHOUT specifying how to deal with missing values\ndefault_mae &lt;- getMAE(with_na, pred)\ndefault_mae\n\n[1] NA\n\n\n\n\n\n\n# Check if a vector is numeric and atomic\nis_numeric_atomic &lt;- function(x) {\n  is.vector(x) && is.atomic(x) && is.numeric(x)\n}\n\n\nwrapper_RMSE_MAE &lt;- function(response, prediction, metrics = c(\"RMSE\", \"MAE\")) {\n  \n  # Check if values are numeric and atomic vectors\n  if (!is_numeric_atomic(response) || !is_numeric_atomic(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  results &lt;- list()\n  if (\"RMSE\" %in% metrics) {\n    results$RMSE &lt;- getRMSE(response, prediction)\n  }\n  if (\"MAE\" %in% metrics) {\n    results$MAE &lt;- getMAE(response, prediction)\n  }\n  \n  return(results)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Call the wrapper function and ask for each metric individually (WITHOUT missing values)\nrmse_test &lt;- wrapper_RMSE_MAE(resp, pred, metrics = \"RMSE\")\nrmse_test\n\n$RMSE\n[1] 0.9581677\n\nmae_test &lt;- wrapper_RMSE_MAE(resp, pred, metrics = \"MAE\")\nmae_test\n\n$MAE\n[1] 0.8155776\n\n\n\n# Call the wrapper function and ask for both metrics (WITHOUT missing values)\nboth_test &lt;- wrapper_RMSE_MAE(resp, pred)\nboth_test\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\n\n# Call the wrapper function and ask for each metric individually (WITH missing values)\nrmse_test2 &lt;- wrapper_RMSE_MAE(with_na, pred, metrics = \"RMSE\")\nrmse_test2\n\n$RMSE\n[1] NA\n\nmae_test2 &lt;- wrapper_RMSE_MAE(with_na, pred, metrics = \"MAE\")\nmae_test2\n\n$MAE\n[1] NA\n\n\n\n# Call the wrapper function and ask for both metrics (WITH missing values)\nboth_test2 &lt;- wrapper_RMSE_MAE(with_na, pred)\nboth_test2\n\n$RMSE\n[1] NA\n\n$MAE\n[1] NA\n\n\n\n# Call the wrapper function with incorrect data\nincorrect_data &lt;- data.frame(response = resp, prediction = pred)\nincorrect_test &lt;- wrapper_RMSE_MAE(incorrect_data$response, incorrect_data$prediction)\nincorrect_test\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\n\n\n\n\n\n\n\n# Establish URL and topic of interest\nurl &lt;- \"https://newsapi.org/v2/everything\"\nquery &lt;- \"sports\"\nparams &lt;- list(q = query, apiKey = api_key)\n\n# GET request\nresponse &lt;- GET(url, query = params)\n\n# Check for a successful request\nif (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n}\n\n\n\n\n\n# Establish URL and topic of interest\nurl &lt;- \"https://newsapi.org/v2/everything\"\nquery &lt;- \"sports\"\nparams &lt;- list(q = query, apiKey = api_key)\n\n# GET request\nresponse &lt;- GET(url, query = params)\n\n# Check for a successful request\nif (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n  \n  # Create a data frame with the list of articles\n  article_df &lt;- bind_rows(lapply(articles, as.data.frame))\n  \n  # Ensure the first column is a list column\n  article_df &lt;- tibble::as_tibble(article_df)\n  \n  # Print the first 5 rows of the data frame\n  head(article_df)\n}\n\n# A tibble: 6 × 3\n  id           name         `X[[i]]`\n  &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;   \n1 the-verge    The Verge    &lt;NA&gt;    \n2 &lt;NA&gt;         BBC News     &lt;NA&gt;    \n3 &lt;NA&gt;         BBC News     &lt;NA&gt;    \n4 ars-technica Ars Technica &lt;NA&gt;    \n5 &lt;NA&gt;         ReadWrite    &lt;NA&gt;    \n6 &lt;NA&gt;         [Removed]    &lt;NA&gt;    \n\n\n\n\n\n\napi_query &lt;- function(query, from_date) {\n  \n  # Establish URL, topic of interest, and source\n  url &lt;- \"https://newsapi.org/v2/everything\"\n  source(\"api_key.R\", local = TRUE)\n  params &lt;- list(q = query, from = from_date, apiKey = api_key)\n  \n  # GET request\n  response &lt;- GET(url, query = params)\n  \n  # Check for a successful request\n  if (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n  \n  # Create a data frame with the list of articles\n  article_df &lt;- bind_rows(lapply(articles, as.data.frame))\n  \n  # Ensure the first column is a list column\n  article_df &lt;- tibble::as_tibble(article_df)\n  \n  # Return the data frame\n  return(article_df)\n  }\n}\n\nUse this function twice\n\n# First Test\nquery1 &lt;- api_query(query = \"sports\", from_date = \"2024-06-22\")\nquery1\n\n# A tibble: 800 × 3\n   id               name             `X[[i]]`\n   &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   \n 1 &lt;NA&gt;             BBC News         &lt;NA&gt;    \n 2 business-insider Business Insider &lt;NA&gt;    \n 3 business-insider Business Insider &lt;NA&gt;    \n 4 espn             ESPN             &lt;NA&gt;    \n 5 &lt;NA&gt;             BBC News         &lt;NA&gt;    \n 6 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n 7 le-monde         Le Monde         &lt;NA&gt;    \n 8 espn             ESPN             &lt;NA&gt;    \n 9 le-monde         Le Monde         &lt;NA&gt;    \n10 le-monde         Le Monde         &lt;NA&gt;    \n# ℹ 790 more rows\n\n# Second Test\nquery2 &lt;- api_query(query = \"entertainment\", from_date = \"2024-06-14\")\nquery2\n\n# A tibble: 800 × 3\n   id               name             `X[[i]]`\n   &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   \n 1 the-verge        The Verge        &lt;NA&gt;    \n 2 the-verge        The Verge        &lt;NA&gt;    \n 3 business-insider Business Insider &lt;NA&gt;    \n 4 the-verge        The Verge        &lt;NA&gt;    \n 5 &lt;NA&gt;             Gizmodo.com      &lt;NA&gt;    \n 6 wired            Wired            &lt;NA&gt;    \n 7 &lt;NA&gt;             Gizmodo.com      &lt;NA&gt;    \n 8 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n 9 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n10 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n# ℹ 790 more rows"
  },
  {
    "objectID": "Homework4.html#libraries-and-more",
    "href": "Homework4.html#libraries-and-more",
    "title": "Homework4",
    "section": "",
    "text": "source(\"api_key.R\")\nlibrary(httr)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nlibrary(purrr)\nlibrary(jsonlite)\n\n\nAttaching package: 'jsonlite'\n\n\nThe following object is masked from 'package:purrr':\n\n    flatten"
  },
  {
    "objectID": "Homework4.html#task-1-conceptual-questions",
    "href": "Homework4.html#task-1-conceptual-questions",
    "title": "Homework4",
    "section": "",
    "text": "The purpose of the lapply() function is to apply a function to every element in a list and return a list of the results. The lapply() equivalent purrr function is the map() function.\n\n\n\nmy_list_outcome &lt;- lapply(my_list, function(numeric_matrix) { cor(numeric_matrix, method = “kendall”) })\n\n\n\nPurrr functions are generally 1. more consistent and 2. its helper functions stand out in comparison to the BaseR apply family.\n\n\n\nA side-effect function is a function that do not naturally return the modified argument.\n\n\n\nThis is because ‘sd’ is a variable and R has separate namespaces for functions and variables. Therefore, R searches for these names in their respective namespaces based on context clues."
  },
  {
    "objectID": "Homework4.html#task-2-writing-r-functions",
    "href": "Homework4.html#task-2-writing-r-functions",
    "title": "Homework4",
    "section": "",
    "text": "getRMSE &lt;- function(response, prediction, ...) {\n  \n  if (length(response) != length(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  # Calculate the squared error values\n  sq_err &lt;- (response - prediction)^2\n  \n  # Calculate the mean squared error\n  mean_sq_err &lt;- mean(sq_err, ...)\n  \n  # Calculate the root mean square error (RMSE)\n  rmse &lt;- sqrt(mean_sq_err)\n  \n  return(rmse)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Test the RMSE function (without missing values)\nrmse_val &lt;- getRMSE(resp, pred)\nrmse_val\n\n[1] 0.9581677\n\n\n\n# Repeat after replacing two of the response values with missing values (NA_real_)\nwith_na &lt;- resp\nwith_na[sample(1:n, 2)] &lt;- NA_real_\n\n# RMSE WITH specifying how to deal with missing values\nestablished_behavior &lt;- getRMSE(with_na, pred, na.rm = TRUE)\nestablished_behavior\n\n[1] 0.9659906\n\n# RMSE WITHOUT specifying how to deal with missing values\ndefault_behavior &lt;- getRMSE(with_na, pred)\ndefault_behavior\n\n[1] NA\n\n\n\n\n\n\ngetMAE &lt;- function(response, prediction, ...) {\n  \n  if (length(response) != length(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  # Calculate the absolute error values\n  abs_err &lt;- abs(response - prediction)\n  \n  # Calculate the mean absolute error\n  mean_abs_err &lt;- mean(abs_err, ...)\n  \n  return(mean_abs_err)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Test the MAE function (without missing values)\nmae_val &lt;- getMAE(resp, pred)\nmae_val\n\n[1] 0.8155776\n\n\n\n# Repeat after replacing two of the response values with missing values (NA_real_)\nwith_na &lt;- resp\nwith_na[sample(1:n, 2)] &lt;- NA_real_\n\n# MAE WITH specifying how to deal with missing values\nestablished_mae &lt;- getMAE(with_na, pred, na.rm = FALSE)\nestablished_mae\n\n[1] NA\n\n# MAE WITHOUT specifying how to deal with missing values\ndefault_mae &lt;- getMAE(with_na, pred)\ndefault_mae\n\n[1] NA\n\n\n\n\n\n\n# Check if a vector is numeric and atomic\nis_numeric_atomic &lt;- function(x) {\n  is.vector(x) && is.atomic(x) && is.numeric(x)\n}\n\n\nwrapper_RMSE_MAE &lt;- function(response, prediction, metrics = c(\"RMSE\", \"MAE\")) {\n  \n  # Check if values are numeric and atomic vectors\n  if (!is_numeric_atomic(response) || !is_numeric_atomic(prediction)) {\n    stop(\"Length of response and prediction vectors must be the same.\")\n  }\n  \n  results &lt;- list()\n  if (\"RMSE\" %in% metrics) {\n    results$RMSE &lt;- getRMSE(response, prediction)\n  }\n  if (\"MAE\" %in% metrics) {\n    results$MAE &lt;- getMAE(response, prediction)\n  }\n  \n  return(results)\n}\n\n\n\n\n\n# Run the following code to create some response values and predictions\nset.seed(10)\nn &lt;- 100\nx &lt;- runif(n)\nresp &lt;- 3 + 10*x + rnorm(n)\npred &lt;- predict(lm(resp ~ x), data.frame(x))\n\n\n# Call the wrapper function and ask for each metric individually (WITHOUT missing values)\nrmse_test &lt;- wrapper_RMSE_MAE(resp, pred, metrics = \"RMSE\")\nrmse_test\n\n$RMSE\n[1] 0.9581677\n\nmae_test &lt;- wrapper_RMSE_MAE(resp, pred, metrics = \"MAE\")\nmae_test\n\n$MAE\n[1] 0.8155776\n\n\n\n# Call the wrapper function and ask for both metrics (WITHOUT missing values)\nboth_test &lt;- wrapper_RMSE_MAE(resp, pred)\nboth_test\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776\n\n\n\n# Call the wrapper function and ask for each metric individually (WITH missing values)\nrmse_test2 &lt;- wrapper_RMSE_MAE(with_na, pred, metrics = \"RMSE\")\nrmse_test2\n\n$RMSE\n[1] NA\n\nmae_test2 &lt;- wrapper_RMSE_MAE(with_na, pred, metrics = \"MAE\")\nmae_test2\n\n$MAE\n[1] NA\n\n\n\n# Call the wrapper function and ask for both metrics (WITH missing values)\nboth_test2 &lt;- wrapper_RMSE_MAE(with_na, pred)\nboth_test2\n\n$RMSE\n[1] NA\n\n$MAE\n[1] NA\n\n\n\n# Call the wrapper function with incorrect data\nincorrect_data &lt;- data.frame(response = resp, prediction = pred)\nincorrect_test &lt;- wrapper_RMSE_MAE(incorrect_data$response, incorrect_data$prediction)\nincorrect_test\n\n$RMSE\n[1] 0.9581677\n\n$MAE\n[1] 0.8155776"
  },
  {
    "objectID": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "href": "Homework4.html#task-3-querying-an-api-and-a-tidy-style-function",
    "title": "Homework4",
    "section": "",
    "text": "# Establish URL and topic of interest\nurl &lt;- \"https://newsapi.org/v2/everything\"\nquery &lt;- \"sports\"\nparams &lt;- list(q = query, apiKey = api_key)\n\n# GET request\nresponse &lt;- GET(url, query = params)\n\n# Check for a successful request\nif (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n}\n\n\n\n\n\n# Establish URL and topic of interest\nurl &lt;- \"https://newsapi.org/v2/everything\"\nquery &lt;- \"sports\"\nparams &lt;- list(q = query, apiKey = api_key)\n\n# GET request\nresponse &lt;- GET(url, query = params)\n\n# Check for a successful request\nif (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n  \n  # Create a data frame with the list of articles\n  article_df &lt;- bind_rows(lapply(articles, as.data.frame))\n  \n  # Ensure the first column is a list column\n  article_df &lt;- tibble::as_tibble(article_df)\n  \n  # Print the first 5 rows of the data frame\n  head(article_df)\n}\n\n# A tibble: 6 × 3\n  id           name         `X[[i]]`\n  &lt;chr&gt;        &lt;chr&gt;        &lt;chr&gt;   \n1 the-verge    The Verge    &lt;NA&gt;    \n2 &lt;NA&gt;         BBC News     &lt;NA&gt;    \n3 &lt;NA&gt;         BBC News     &lt;NA&gt;    \n4 ars-technica Ars Technica &lt;NA&gt;    \n5 &lt;NA&gt;         ReadWrite    &lt;NA&gt;    \n6 &lt;NA&gt;         [Removed]    &lt;NA&gt;    \n\n\n\n\n\n\napi_query &lt;- function(query, from_date) {\n  \n  # Establish URL, topic of interest, and source\n  url &lt;- \"https://newsapi.org/v2/everything\"\n  source(\"api_key.R\", local = TRUE)\n  params &lt;- list(q = query, from = from_date, apiKey = api_key)\n  \n  # GET request\n  response &lt;- GET(url, query = params)\n  \n  # Check for a successful request\n  if (http_error(response)) {\n  stop(\"HTTP error \", status_code(response))\n} else {\n  \n  # Parse JSON\n  content &lt;- fromJSON(rawToChar(response$content))\n  \n  # Establish list of articles\n  articles &lt;- content$articles\n  \n  # Create a data frame with the list of articles\n  article_df &lt;- bind_rows(lapply(articles, as.data.frame))\n  \n  # Ensure the first column is a list column\n  article_df &lt;- tibble::as_tibble(article_df)\n  \n  # Return the data frame\n  return(article_df)\n  }\n}\n\nUse this function twice\n\n# First Test\nquery1 &lt;- api_query(query = \"sports\", from_date = \"2024-06-22\")\nquery1\n\n# A tibble: 800 × 3\n   id               name             `X[[i]]`\n   &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   \n 1 &lt;NA&gt;             BBC News         &lt;NA&gt;    \n 2 business-insider Business Insider &lt;NA&gt;    \n 3 business-insider Business Insider &lt;NA&gt;    \n 4 espn             ESPN             &lt;NA&gt;    \n 5 &lt;NA&gt;             BBC News         &lt;NA&gt;    \n 6 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n 7 le-monde         Le Monde         &lt;NA&gt;    \n 8 espn             ESPN             &lt;NA&gt;    \n 9 le-monde         Le Monde         &lt;NA&gt;    \n10 le-monde         Le Monde         &lt;NA&gt;    \n# ℹ 790 more rows\n\n# Second Test\nquery2 &lt;- api_query(query = \"entertainment\", from_date = \"2024-06-14\")\nquery2\n\n# A tibble: 800 × 3\n   id               name             `X[[i]]`\n   &lt;chr&gt;            &lt;chr&gt;            &lt;chr&gt;   \n 1 the-verge        The Verge        &lt;NA&gt;    \n 2 the-verge        The Verge        &lt;NA&gt;    \n 3 business-insider Business Insider &lt;NA&gt;    \n 4 the-verge        The Verge        &lt;NA&gt;    \n 5 &lt;NA&gt;             Gizmodo.com      &lt;NA&gt;    \n 6 wired            Wired            &lt;NA&gt;    \n 7 &lt;NA&gt;             Gizmodo.com      &lt;NA&gt;    \n 8 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n 9 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n10 &lt;NA&gt;             ReadWrite        &lt;NA&gt;    \n# ℹ 790 more rows"
  }
]